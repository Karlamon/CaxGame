<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
grav = 1.2;
hsp = 0;
vsp = 0;
jumpspeed = 28;
movespeed = 18;
weapongap = 256;
healthbar = 3;
kills = 0;
coins = 0;
ammo_long = 0;
ammo_multi = 0;
wpos = 0;
weapon = obj_weapon;
weapon_sprite = spr_weapon_blue;
is_right = true;
is_throwing = false;
has_thrown = false;
is_hit = false;
invincible = false;
state = "alive";
game_over = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI movements
//Weapon
spr_weapon_angle = 0;

//Coin
spr_coin_xscale = 1;
spr_coin_flipped = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_over = true;
audio_stop_sound(snd_spin);
instance_create(0, 0, obj_game_over);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>is_hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>is_throwing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 1;
state = "alive";
invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause)
    exit; 

image_speed = 0.25;

//Get the player's inputs
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_throw = keyboard_check_pressed(vk_control);
key_change_weapon = keyboard_check_pressed(vk_tab);

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;

//Losing
if (state == "dead")
{
    audio_stop_sound(mus_theme);
    audio_stop_sound(snd_throw);
    sprite_index = spr_player_hit;
    depth = -1000;
    coins = 0;
    vsp += grav;
    y += vsp;
    if (vsp &gt;= 200) {
        vsp = 0;
    }
    if (game_over == false)
    {
        if (alarm[3] == -1)
        {
            alarm[3] = 120;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_enter))
        {
            room_restart();
        }
    }
}
//Winning
else if (state == "win")
{
    image_alpha = 1;
    sprite_index = spr_player_jump;
}
//Alive
else
{
    //Actions
    if (keyboard_check_pressed(vk_right))
        is_right = true;
    if (keyboard_check_pressed(vk_left))
        is_right = false;
    if (vsp &lt; 30)
        vsp += grav;
    
    if (place_meeting(x, y+1, obj_tile_wall))
    {
        if (key_jump)
        {
            vsp = key_jump * -jumpspeed;
            audio_play_sound(snd_jump, 10, false);
        }
    }
    
    if (key_throw)
    {
        if (has_thrown == false)
        {
            is_throwing = true;
            has_thrown = true;
            if (is_right == true)
            {
                instance_create(x + weapongap, y, weapon);
                if (weapon == obj_weapon_multi)
                {
                    instance_create(x + weapongap, y - 128, weapon);
                    instance_create(x + weapongap, y - 256, weapon);
                }
            }
            else
            {
                instance_create(x - weapongap, y, weapon);
                if (weapon == obj_weapon_multi)
                {
                    instance_create(x - weapongap, y - 128, weapon);
                    instance_create(x - weapongap, y - 256, weapon);
                }
            }
            if ((weapon == obj_weapon_long) &amp;&amp; (ammo_long &gt; 0))
            {
                --ammo_long;
                if (ammo_long == 0)
                {
                    weapon = obj_weapon;
                    weapon_sprite = spr_weapon_blue;
                    wpos = 0;
                }
            }
            if ((weapon == obj_weapon_multi) &amp;&amp; (ammo_multi &gt; 0))
            {
                --ammo_multi;
                if (ammo_multi == 0)
                {
                    weapon = obj_weapon;
                    weapon_sprite = spr_weapon_blue;
                    wpos = 0;
                }
            }
            audio_play_sound(snd_throw, 10, false);
        }
    }
    
    //Cycle weapon
    if (key_change_weapon)
    {
        audio_play_sound(snd_menu_navigate, 10, false);
        ++wpos;
        if (wpos &gt; 2)
            wpos = 0;
        if (wpos == 0)
        {
            weapon = obj_weapon;
            weapon_sprite = spr_weapon_blue;
        }
        if (wpos == 1)
        {
            if (ammo_long &gt; 0)
            {
                weapon = obj_weapon_long;
                weapon_sprite = spr_weapon_red;
            }
            else
                ++wpos;
        }
        if (wpos == 2)
        {
            if (ammo_multi &gt; 0)
            {
                weapon = obj_weapon_multi;
                weapon_sprite = spr_weapon_green;
            }
            else {
                wpos = 0;
                weapon = obj_weapon;
                weapon_sprite = spr_weapon_blue;
            }
        }
    }
    
    //Horizontal collision
    if(place_meeting(x+hsp, y, obj_tile_wall))
    {
        while(!place_meeting(x+sign(hsp), y, obj_tile_wall))
            x += sign(hsp);
        hsp = 0;
    }
    
    //Vertical collision
    if(place_meeting(x, y+vsp, obj_tile_wall))
    {
        while(!place_meeting(x, y+sign(vsp), obj_tile_wall))
            y += sign(vsp);
        vsp = 0;
    }
    
    x += hsp;
    y += vsp;
    
    //Animate
    if (move != 0)
        image_xscale = (move);
    if (is_throwing == true)
    {
        sprite_index = spr_player_throw;
        if (alarm[1] == -1)
        {
            image_index = 0;
            alarm[1] = 24;
        }
    }
    else if (is_hit == true)
    {
        sprite_index = spr_player_hit;
        if (alarm[2] == -1)
        {
            
            alarm[2] = 24;
        }
    }
    else
    {
        if (place_meeting(x, y+1, obj_tile_wall))
        {
            if (hsp !=0)
                sprite_index = spr_player_run;
            else
                sprite_index = spr_player_idle;
        }
        else
        {
            if (vsp &lt; 0)
                sprite_index = spr_player_jump;
            else
                sprite_index = spr_player_fall;
        }
    }
    
    //Kill
    if (y &lt;= 0)
        healthbar = 0;
    if (healthbar == 0)
    {
        alarm[0] = -1;
        audio_play_sound(snd_lose, 10, false);
        state = "dead";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI movements
if (global.pause)
    exit;

//Weapon
if (spr_weapon_angle &lt; 360)
    spr_weapon_angle += 2;
else
    spr_weapon_angle = 0

//Coin
if (spr_coin_flipped == false)
{
    spr_coin_xscale -= 0.05;
    if (spr_coin_xscale == 0)
        spr_coin_flipped = true;
}
else
{
    spr_coin_xscale += 0.05;
    if (spr_coin_xscale == 1)
        spr_coin_flipped = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invincible == false)
{
    --healthbar;
    if (healthbar &gt;= 1)
    {
        audio_play_sound(snd_hurt, 10, false);
        invincible = true;
        image_alpha = 0.5;
        is_hit = true;
        state = "injured";
        for (h = 200; h &gt;= 0; --h)
            hsp -= h;
        alarm[0] = 120;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>healthbar = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw font
draw_set_halign(fa_center);
draw_set_font(fnt_menu);

//Draw health
heartspace = 64;
for (var h = 0; h &lt; healthbar; ++h)
{
    draw_sprite(spr_heart, -1, heartspace, 64);
    heartspace += 64;
}

//Draw weapon
draw_sprite_ext(weapon_sprite, 0, 64, 128, 0.5, 0.5, spr_weapon_angle, -1, 1);
if (weapon == obj_weapon_long)
    draw_text(140, 64, string(ammo_long));
else if (weapon == obj_weapon_multi)
    draw_text(140, 64, string(ammo_multi));

//Draw coin collection
draw_sprite_ext(spr_coin, 0, 64, 192, spr_coin_xscale, 1, 0, -1, 1);
draw_text(140, 128, string(coins));

image_speed = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
